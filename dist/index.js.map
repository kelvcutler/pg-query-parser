{"version":3,"sources":["../src/index.js"],"names":["parse","process","platform","require","execSync","escapeArgs","query","parsed","toString","deparse","verify","result","json1","json2","JSON","stringify","walk","first","all","tables","byType","clean","Deparser"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA,IAAIA,QAAQ,IAAZ;;AAEA,IAAIC,QAAQC,QAAR,KAAqB,OAArB,IAAgCD,QAAQC,QAAR,KAAqB,KAAzD,EAAgE;AAAA,iBAC3CC,QAAQ,eAAR,CAD2C;;AAAA,QACvDC,QADuD,YACvDA,QADuD;;AAE9D,QAAMC,aAAaF,QAAQ,eAAR,CAAnB;AACA,UAmBOH,KAnBP,WAAQ,eAAUM,KAAV,EAAiB;AACvB,UAAMC,SAASH,SAAU,iCAAgCC,WAAWC,KAAX,CAAkB,EAA5D,EAA+DE,QAA/D,CAAwE,MAAxE,CAAf;AACA,WAAO,EAACF,OAAOC,MAAR,EAAP;AACD,GAHD;AAID,CAPD,MAOO;AACL,UAcOP,KAdP,WAAQG,QAAQ,UAAR,EAAoB,UAApB,EAAgCH,KAAxC;AACD;;AAED,MAAMS,UAAU,mBAASA,OAAzB;;AAEA,MAAMC,SAAUJ,KAAD,IAAW;AACxB,QAAMK,SAASF,QAAQT,MAAMM,KAAN,EAAaA,KAArB,CAAf;;AAEA,QAAMM,QAAQ,kBAAMZ,MAAMM,KAAN,EAAaA,KAAnB,CAAd;AACA,QAAMO,QAAQ,kBAAMb,MAAMW,MAAN,EAAcL,KAApB,CAAd;;AAEA,SAAOQ,KAAKC,SAAL,CAAeH,KAAf,MAA0BE,KAAKC,SAAL,CAAeF,KAAf,CAAjC;AACD,CAPD;;QASSb,K,GAAAA,K;QAAOS,O,GAAAA,O;QAASO,I;QAAMC,K;QAAOC,G;QAAKC,M;QAAQC,M;QAAQC,K;QAAOX,M,GAAAA,M;QAAQY,Q","file":"index.js","sourcesContent":["import Deparser from './deparser';\nimport { walk, all, first, tables, byType, clean } from './utils';\n\nvar parse = null;\n\nif (process.platform === 'win32' || process.platform === 'x64') {\n  const {execSync} = require('child_process');\n  const escapeArgs = require('./escape-args');\n  parse = function (query) {\n    const parsed = execSync(`docker run -t pg-query-parser ${escapeArgs(query)}`).toString('utf8');\n    return {query: parsed};\n  };\n} else {\n  parse = require('bindings')('pg-query').parse;\n}\n\nconst deparse = Deparser.deparse;\n\nconst verify = (query) => {\n  const result = deparse(parse(query).query);\n\n  const json1 = clean(parse(query).query);\n  const json2 = clean(parse(result).query);\n\n  return JSON.stringify(json1) === JSON.stringify(json2);\n};\n\nexport { parse, deparse, walk, first, all, tables, byType, clean, verify, Deparser };\n"]}